void eval(char *cmdline) 
{
	char *argv[MAXARGS];
	char buf[MAXLINE];
	int bg;
	pid_t pid;
	sigset_t mask;

	strcpy(buf, cmdline);

	bg = parseline(buf, argv);

	if(argv[0] == NULL) {
		return;
	}

	if(!builtin_cmd(argv)) {
		sigemptyset(&mask);
		sigaddset(&mask, SIGCHLD);
		sigprocmask(SIG_BLOCK, &mask, NULL);
		

		//child
		if(pid = fork() < 0) {
			setpgid(0, 0);
			sigprocmask(SIG_UNBLOCK, &mask, NULL);

			if(execve(argv[0], argv, environ) < 0) {
				printf("%s: Command not found\n", argv[0]);
				exit(0);
			}

		}

		//parent
		if(!bg) {
			addjob(jobs, pid, FG, cmdline);
			sigprocmask(SIG_UNBLOCK, &mask, NULL);
			waitfg(pid);
		}
		else {
			addjob(jobs, pid, BG, cmdline);
			sigprocmask(SIG_UNBLOCK, &mask, NULL);
			printf("[%d] (%d) %s", pid2jid(pid), (int)pid, cmdline);
		}
	}
		
	return;
}


int builtin_cmd(char **argv) 
{
	if(!strcmp(argv[0], "quit")) {
		exit(0);
	}

	else if(!strcmp(argv[0], "fg")) {
		do_bgfg(argv);
		return 1;
	}

	else if(!strcmp(argv[0], "bg")) {
		do_bgfg(argv);
		return 1;
	}

	else if(!strcmp(argv[0], "jobs")) {
		listjobs(jobs);
		return 1;
	}


	return 0;     /* not a builtin command */
}




void do_bgfg(char **argv) 
{
	struct job_t *job;
	char *id = argv[1];
	int jid;

	if(id == NULL) {
		printf("%s command requires PID or %%jobid argument\n", argv[0]);
		return;
	}

	if(id[0] == '%') {
		jid = atoi(&id[1]);

		if(!(job = getjobjid(jobs, jid))) {
			printf("%s: No such job\n", id);
			return;
		}
	}
	
	else if(isdigit(id[0])) {
		pid_t pid = atoi(id);

		if(!(job = getjobpid(jobs, pid))) {
			printf("(%d): No such process\n", pid);
			return;
		}
	}

	else {
		printf("%s: argument must be a PID or %%jobid\n", argv[0]);
		return;
	}
	
	if(strcmp(argv[0], "bg") == 0) {
		job->state = BG;
		printf("[%d] (%d) %s", job->jid, job->pid, job->cmdline);
		kill(-(job->pid), SIGCONT);
	}
	else if(strcmp(argv[0], "fg") == 0) {
		job->state = FG;
		kill(-(job->pid), SIGCONT);
		waitfg(job->pid);
	}

	return;
}


void waitfg(pid_t pid)
{
	while(pid == fgpid(jobs)) {
		sleep(0);
	}

	return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever
 *     a child job terminates (becomes a zombie), or stops because it
 *     received a SIGSTOP or SIGTSTP signal. The handler reaps all
 *     available zombie children, but doesn't wait for any other
 *     currently running children to terminate.  
 */
void sigchld_handler(int sig) 
{
	int status;
	pid_t pid;

	while((pid = waitpid(-1, &status, WNOHANG | WUNTRACED)) > 0) {
		struct job_t *job = getjobpid(jobs, pid);

		if(WIFSIGNALED(status) != 0) {
			deletejob(jobs, pid);
		}

		else if(WIFSTOPPED(status) != 0) {
			job->state =ST;
		}

		else if(WIFEXITED(status) != 0) {
			deletejob(jobs, pid);
		}

	}
	
	return;
}

/* 
 * sigint_handler - The kernel sends a SIGINT to the shell whenver the
 *    user types ctrl-c at the keyboard.  Catch it and send it along
 *    to the foreground job.  
 */
void sigint_handler(int sig) 
{
	int pid = fgpid(jobs);
	int jid = pid2jid(pid);

	if(pid != 0) {
		kill(-pid, SIGINT);
		
		if(sig < 0) {
			printf("Job [%d] (%d) terminated by signal %d\n", jid, pid, (-sig));
			deletejob(jobs, pid);
		}
	}

	return;
}

/*
 * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever
 *     the user types ctrl-z at the keyboard. Catch it and suspend the
 *     foreground job by sending it a SIGTSTP.  
 */
void sigtstp_handler(int sig) 
{
	int pid = fgpid(jobs);
	int jid = pid2jid(pid);

	if(pid != 0) {
		printf("Job [%d] (%d) Stopped by signal %d\n", jid, pid, sig);
		getjobpid(jobs, pid)->state = ST;
		kill(-pid, SIGTSTP);
	}

	return;
}


